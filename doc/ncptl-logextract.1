.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  -- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.\" Define a properly typeset version of the name "coNCePTuaL".
.ie t .ds co \s-2CO\s+2NC\s-2E\s+2PT\s-2UA\s+2L
.el   .ds co coNCePTuaL
.
.IX Title "NCPTL-LOGEXTRACT 1"
.TH NCPTL-LOGEXTRACT 1 "4 August 2014" "1.5" " "
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ncptl\-logextract \- Extract various bits of information from a \*(co log file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
ncptl-logextract
\&\fB\-\-usage\fR | \fB\-\-help\fR | \fB\-\-man\fR
.PP
ncptl-logextract
[\fB\-\-extract\fR=[data|params|env|source|warnings]]
[\fB\-\-format\fR=\fIformat\fR]
[\fIformat-specific options\fR...]
[\fB\-\-before\fR=\fIstring\fR]
[\fB\-\-after\fR=\fIstring\fR]
[\fB\-\-force\-merge\fR[=\fInumber\fR]]
[\fB\-\-procs\fR=\fIstring\fR]
[\fB\-\-quiet\fR]
[\fB\-\-verbose\fR]
[\fB\-\-output\fR=\fIfilename\fR]
[\fIfilename\fR...]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Background"
.IX Subsection "Background"
\*(co is a domain-specific programming language designed to
facilitate writing networking benchmarks and validation suites.
\*(co programs can log data to a file but in only a single file
format.  \fBncptl-logextract\fR extracts this log data and outputs it in
a variety of formats for use with other applications.
.PP
The \*(co-generated log files that serve as input to
\&\fBncptl-logextract\fR are plain \s-1ASCII\s0 files.  Syntactically, they
contain a number of newline-separated tables.  Each table contains a
number of newline-separated rows of comma-separated columns.  This is
known generically as \fIcomma-separated value\fR or \fI\s-1CSV\s0\fR format.  Each
table begins with two rows of header text followed by one or more rows
of numbers.  Text is written within double quotes.  Double-quote
characters and backslashes within text are escaped with a backslash.
No other escaped characters are recognized.  Lines that begin with
\&\f(CW\*(C`#\*(C'\fR are considered comments.
.PP
Semantically, there are four types of data present in every
\*(co-generated log file:
.IP "1." 4
The complete source code of the \*(co program that produced the
log file
.IP "2." 4
Characteristics of the run-time environment and the values of all
command-line parameters
.IP "3." 4
A list of warning messages that \*(co issued while analyzing the
run-time environment
.IP "4." 4
One or more tables of measurement data produced by the \*(co program
.PP
The first three items appear within comment lines.  The measurement
data is written in \s-1CSV\s0 format.
.SS "Extracting information from \*(co log files"
.IX Subsection "Extracting information from \*(co log files"
It is common to want to extract information (especially measurement
data) from log files.  For simple formatting operations, a one-line
awk or Perl script suffices.  However, as the complexity of the
formatting increases, the complexity of these scripts increases even
more.  That's where \fBncptl-logextract\fR fits in.  \fBncptl-logextract\fR
makes it easy to extract any of the four types of log data described
above and format it in variety of ways.  Although the number of
options that \fBncptl-logextract\fR supports may be somewhat daunting, it
is well worth learning how to use \fBncptl-logextract\fR to avoid
reinventing the wheel every time a \*(co log file needs to be
processed.  \fBncptl-logextract\fR takes care of all sorts of special
cases that crop up when manipulating \*(co log files.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fBncptl-logextract\fR accepts the following command-line options
regardless of what data is extracted from the log file and what
formatting occurs:
.IP "\fB\-h\fR, \fB\-\-help\fR" 6
.IX Item "-h, --help"
Output \*(L"\s-1SYNOPSIS\*(R"\s0 and \*(L"\s-1OPTIONS\*(R"\s0 then exit the program.
.IP "\fB\-m\fR, \fB\-\-man\fR" 6
.IX Item "-m, --man"
Output a complete Unix man (\*(L"manual\*(R") page for \fBncptl-logextract\fR
then exit the program.
.IP "\fB\-e\fR \fIinfo\fR, \fB\-\-extract\fR=\fIinfo\fR" 6
.IX Item "-e info, --extract=info"
Specify what sort of data should be extracted from the log file.
Acceptable values for \fIinfo\fR are listed and described in
\&\*(L"\s-1ADDITIONAL OPTIONS\*(R"\s0 and include \f(CW\*(C`data\*(C'\fR, \f(CW\*(C`params\*(C'\fR, \f(CW\*(C`env\*(C'\fR, and
\&\f(CW\*(C`source\*(C'\fR.
.IP "\fB\-f\fR \fIformat\fR, \fB\-\-format\fR=\fIformat\fR" 6
.IX Item "-f format, --format=format"
Specify how the extracted data should be formatted.  Valid arguments
depend upon the value passed to \f(CW\*(C`\-\-extract\*(C'\fR and include such formats
as \f(CW\*(C`csv\*(C'\fR, \f(CW\*(C`html\*(C'\fR, \f(CW\*(C`latex\*(C'\fR, \f(CW\*(C`text\*(C'\fR, and \f(CW\*(C`bash\*(C'\fR.  See \*(L"\s-1ADDITIONAL
OPTIONS\*(R"\s0 for details, explanations, and descriptions of
applicability.
.IP "\fB\-b\fR \fIstring\fR, \fB\-\-before\fR=\fIstring\fR" 6
.IX Item "-b string, --before=string"
Output an arbitrary string of text before any other output.  \fIstring\fR
can contain escape characters such as \f(CW\*(C`\en\*(C'\fR for newline, \f(CW\*(C`\et\*(C'\fR for
tab, and \f(CW\*(C`\e\e\*(C'\fR for backslash.
.IP "\fB\-a\fR \fIstring\fR, \fB\-\-after\fR=\fIstring\fR" 6
.IX Item "-a string, --after=string"
Output an arbitrary string of text after all other output.  \fIstring\fR
can contain escape characters such as \f(CW\*(C`\en\*(C'\fR for newline, \f(CW\*(C`\et\*(C'\fR for
tab, and \f(CW\*(C`\e\e\*(C'\fR for backslash.
.IP "\fB\-F\fR [\fInumber\fR], \fB\-\-force\-merge\fR[=\fInumber\fR]" 6
.IX Item "-F [number], --force-merge[=number]"
Try extra hard to merge multiple log files, even if they seem to have
been produced by different programs or in different execution
environments.  This generally implies padding empty rows and columns
with blanks.  However, if \f(CW\*(C`\-\-force\-merge\*(C'\fR is given a numeric
argument, the value of that argument is used instead of blanks to pad
empty locations.  Note that \f(CW\*(C`\-\-force\-merge\*(C'\fR is different from
\&\f(CW\*(C`\-\-force\-merge=0\*(C'\fR because data-merging functions (\f(CW\*(C`mean\*(C'\fR, \f(CW\*(C`max\*(C'\fR,
etc.) ignore blanks but consider zeroes.
.IP "\fB\-p\fR \fIstring\fR, \fB\-\-procs\fR=\fIstring\fR" 6
.IX Item "-p string, --procs=string"
When given a \*(L"merged\*(R" log file, unmerge only the data corresponding to
the comma-separated processor ranges in \fIstring\fR.  For example,
\&\f(CW\*(C`\-\-procs=0,16\-20,25\*(C'\fR unmerges the data for processors\ 0, 16, 17,
18, 19, 20, and\ 25.  By default, \fBncptl-logextract\fR uses all of
the data from a merged log file.
.IP "\fB\-q\fR, \fB\-\-quiet\fR" 6
.IX Item "-q, --quiet"
Suppress progress output.  Normally, \fBncptl-logextract\fR outputs
status information regarding its operation.  The \fB\-\-quiet\fR option
instruct \fBncptl-logextract\fR to output only warning and error
messages.
.IP "\fB\-v\fR, \fB\-\-verbose\fR" 6
.IX Item "-v, --verbose"
Increase progress output.  Normally, \fBncptl-logextract\fR outputs basic
status information regarding its operation.  The \fB\-\-verbose\fR option
instruct \fBncptl-logextract\fR to output more detailed information.
Each time \fB\-\-verbose\fR is specified, the program's verbosity increases
(up to a maximum).
.IP "\fB\-o\fR \fIfilename\fR, \fB\-\-output\fR=\fIfilename\fR" 6
.IX Item "-o filename, --output=filename"
Redirect the output from \fBncptl-logextract\fR to a file.  By default,
\&\fBncptl-logextract\fR writes to the standard output device.
.PP
The above is merely a terse summary of the \fBncptl-logextract\fR
command-line options.  The reader is directed to \*(L"\s-1ADDITIONAL
OPTIONS\*(R"\s0 for descriptions of the numerous ways that
\&\fBncptl-logextract\fR can format information.  Note that \f(CW\*(C`\-\-extract\*(C'\fR
and \f(CW\*(C`\-\-format\*(C'\fR are the two most common options as they specify what
to extract and how to format it; most of the remaining options in
\&\*(L"\s-1ADDITIONAL OPTIONS\*(R"\s0 exist to provide precise control over
formatting details.
.SH "ADDITIONAL OPTIONS"
.IX Header "ADDITIONAL OPTIONS"
The \fBncptl-logextract\fR command-line options follow a hierarchy.  At
the top level is \f(CW\*(C`\-\-extract\*(C'\fR, which specifies which of the four types
of data \fBncptl-logextract\fR should extract.  Next, \f(CW\*(C`\-\-format\*(C'\fR
specifies how the extracted data should be formatted.  Valid values
for \f(CW\*(C`\-\-format\*(C'\fR differ based on the argument to \f(CW\*(C`\-\-extract\*(C'\fR.
Finally, there are various format-specific options that fine-tune the
formatted output.  Each output format accepts a different set of
options.  Many of the options appear at multiple places within the
hierarchy, although usually with different default values.
.PP
The following hierarchical list describes all of the valid
combinations of \f(CW\*(C`\-\-extract\*(C'\fR, \f(CW\*(C`\-\-format\*(C'\fR, and the various
format-specific options:
.PP

.ie n .IP """\-\-extract=data"" [default]" 4
.el .IP "\f(CW\-\-extract=data\fR [default]" 4
.IX Item "--extract=data [default]"
Extract measurement data
.RS 4
.ie n .IP """\-\-format=csv"" [default]" 4
.el .IP "\f(CW\-\-format=csv\fR [default]" 4
.IX Item "--format=csv [default]"
Output each table in comma-separated-value format
.RS 4
.ie n .IP """\-\-noheaders""" 4
.el .IP "\f(CW\-\-noheaders\fR" 4
.IX Item "--noheaders"
Do not output column headers
.ie n .IP """\-\-colbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colbegin=\fR\fIstring\fR" 4
.IX Item "--colbegin=string"
Specify the text placed at the beginning of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-colsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colsep=\fR\fIstring\fR" 4
.IX Item "--colsep=string"
Specify the text used to separate data columns [default: "\f(CW\*(C`,\*(C'\fR"]
.ie n .IP """\-\-colend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colend=\fR\fIstring\fR" 4
.IX Item "--colend=string"
Specify the text placed at the end of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowbegin=\fR\fIstring\fR" 4
.IX Item "--rowbegin=string"
Specify the text placed at the beginning of each data row [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowsep=\fR\fIstring\fR" 4
.IX Item "--rowsep=string"
Specify the text used to separate data rows [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowend=\fR\fIstring\fR" 4
.IX Item "--rowend=string"
Specify the text placed at the end of each data row [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-hcolbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolbegin=\fR\fIstring\fR" 4
.IX Item "--hcolbegin=string"
Specify the text placed at the beginning of each header column [default: same as colbegin]
.ie n .IP """\-\-hcolsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolsep=\fR\fIstring\fR" 4
.IX Item "--hcolsep=string"
Specify the text used to separate header columns [default: same as colsep]
.ie n .IP """\-\-hcolend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolend=\fR\fIstring\fR" 4
.IX Item "--hcolend=string"
Specify the text placed at the end of each header column [default: same as colend]
.ie n .IP """\-\-hrowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowbegin=\fR\fIstring\fR" 4
.IX Item "--hrowbegin=string"
Specify the text placed at the beginning of each header row [default: same as rowbegin]
.ie n .IP """\-\-hrowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowsep=\fR\fIstring\fR" 4
.IX Item "--hrowsep=string"
Specify the text used to separate header rows [default: same as rowsep]
.ie n .IP """\-\-hrowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowend=\fR\fIstring\fR" 4
.IX Item "--hrowend=string"
Specify the text placed at the end of each header row [default: same as rowend]
.ie n .IP """\-\-tablebegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablebegin=\fR\fIstring\fR" 4
.IX Item "--tablebegin=string"
Specify the text placed at the beginning of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-tablesep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablesep=\fR\fIstring\fR" 4
.IX Item "--tablesep=string"
Specify the text used to separate tables [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-tableend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tableend=\fR\fIstring\fR" 4
.IX Item "--tableend=string"
Specify the text placed at the end of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-quote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-quote=\fR\fIstring\fR" 4
.IX Item "--quote=string"
Specify the text used to begin quoted text [default: "\f(CW\*(C`"\*(C'\fR"]
.ie n .IP """\-\-unquote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-unquote=\fR\fIstring\fR" 4
.IX Item "--unquote=string"
Specify the text used to end quoted text [default: same as quote]
.ie n .IP """\-\-excel""" 4
.el .IP "\f(CW\-\-excel\fR" 4
.IX Item "--excel"
Output strings in a format readable by Microsoft Excel
.ie n .IP """\-\-keep\-columns=""\fIstring\fR" 4
.el .IP "\f(CW\-\-keep\-columns=\fR\fIstring\fR" 4
.IX Item "--keep-columns=string"
Enumerate the columns that should be included in the output [default: all columns]
.ie n .IP """\-\-merge=""\fIfunction\fR" 4
.el .IP "\f(CW\-\-merge=\fR\fIfunction\fR" 4
.IX Item "--merge=function"
Specify how to merge data from multiple files [default: "\f(CW\*(C`mean\*(C'\fR"]
.ie n .IP """\-\-showfnames=""\fIoption\fR" 4
.el .IP "\f(CW\-\-showfnames=\fR\fIoption\fR" 4
.IX Item "--showfnames=option"
Add an extra header row showing the filename the data came from [default: "\f(CW\*(C`none\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=tsv""" 4
.el .IP "\f(CW\-\-format=tsv\fR" 4
.IX Item "--format=tsv"
Output each table in tab-separated-value format
.RS 4
.ie n .IP """\-\-noheaders""" 4
.el .IP "\f(CW\-\-noheaders\fR" 4
.IX Item "--noheaders"
Do not output column headers
.ie n .IP """\-\-colbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colbegin=\fR\fIstring\fR" 4
.IX Item "--colbegin=string"
Specify the text placed at the beginning of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-colsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colsep=\fR\fIstring\fR" 4
.IX Item "--colsep=string"
Specify the text used to separate data columns [default: "\f(CW\*(C`\e\et\*(C'\fR"]
.ie n .IP """\-\-colend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colend=\fR\fIstring\fR" 4
.IX Item "--colend=string"
Specify the text placed at the end of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowbegin=\fR\fIstring\fR" 4
.IX Item "--rowbegin=string"
Specify the text placed at the beginning of each data row [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowsep=\fR\fIstring\fR" 4
.IX Item "--rowsep=string"
Specify the text used to separate data rows [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowend=\fR\fIstring\fR" 4
.IX Item "--rowend=string"
Specify the text placed at the end of each data row [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-hcolbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolbegin=\fR\fIstring\fR" 4
.IX Item "--hcolbegin=string"
Specify the text placed at the beginning of each header column [default: same as colbegin]
.ie n .IP """\-\-hcolsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolsep=\fR\fIstring\fR" 4
.IX Item "--hcolsep=string"
Specify the text used to separate header columns [default: same as colsep]
.ie n .IP """\-\-hcolend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolend=\fR\fIstring\fR" 4
.IX Item "--hcolend=string"
Specify the text placed at the end of each header column [default: same as colend]
.ie n .IP """\-\-hrowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowbegin=\fR\fIstring\fR" 4
.IX Item "--hrowbegin=string"
Specify the text placed at the beginning of each header row [default: same as rowbegin]
.ie n .IP """\-\-hrowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowsep=\fR\fIstring\fR" 4
.IX Item "--hrowsep=string"
Specify the text used to separate header rows [default: same as rowsep]
.ie n .IP """\-\-hrowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowend=\fR\fIstring\fR" 4
.IX Item "--hrowend=string"
Specify the text placed at the end of each header row [default: same as rowend]
.ie n .IP """\-\-tablebegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablebegin=\fR\fIstring\fR" 4
.IX Item "--tablebegin=string"
Specify the text placed at the beginning of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-tablesep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablesep=\fR\fIstring\fR" 4
.IX Item "--tablesep=string"
Specify the text used to separate tables [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-tableend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tableend=\fR\fIstring\fR" 4
.IX Item "--tableend=string"
Specify the text placed at the end of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-quote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-quote=\fR\fIstring\fR" 4
.IX Item "--quote=string"
Specify the text used to begin quoted text [default: "\f(CW\*(C`"\*(C'\fR"]
.ie n .IP """\-\-unquote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-unquote=\fR\fIstring\fR" 4
.IX Item "--unquote=string"
Specify the text used to end quoted text [default: same as quote]
.ie n .IP """\-\-excel""" 4
.el .IP "\f(CW\-\-excel\fR" 4
.IX Item "--excel"
Output strings in a format readable by Microsoft Excel
.ie n .IP """\-\-keep\-columns=""\fIstring\fR" 4
.el .IP "\f(CW\-\-keep\-columns=\fR\fIstring\fR" 4
.IX Item "--keep-columns=string"
Enumerate the columns that should be included in the output [default: all columns]
.ie n .IP """\-\-merge=""\fIfunction\fR" 4
.el .IP "\f(CW\-\-merge=\fR\fIfunction\fR" 4
.IX Item "--merge=function"
Specify how to merge data from multiple files [default: "\f(CW\*(C`mean\*(C'\fR"]
.ie n .IP """\-\-showfnames=""\fIoption\fR" 4
.el .IP "\f(CW\-\-showfnames=\fR\fIoption\fR" 4
.IX Item "--showfnames=option"
Add an extra header row showing the filename the data came from [default: "\f(CW\*(C`none\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=html""" 4
.el .IP "\f(CW\-\-format=html\fR" 4
.IX Item "--format=html"
Output each table in \s-1HTML\s0 table format
.RS 4
.ie n .IP """\-\-noheaders""" 4
.el .IP "\f(CW\-\-noheaders\fR" 4
.IX Item "--noheaders"
Do not output column headers
.ie n .IP """\-\-colbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colbegin=\fR\fIstring\fR" 4
.IX Item "--colbegin=string"
Specify the text placed at the beginning of each data column [default: "\f(CW\*(C`<td>\*(C'\fR"]
.ie n .IP """\-\-colsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colsep=\fR\fIstring\fR" 4
.IX Item "--colsep=string"
Specify the text used to separate data columns [default: "\f(CW\*(C`\ \*(C'\fR"]
.ie n .IP """\-\-colend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colend=\fR\fIstring\fR" 4
.IX Item "--colend=string"
Specify the text placed at the end of each data column [default: "\f(CW\*(C`</td>\*(C'\fR"]
.ie n .IP """\-\-rowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowbegin=\fR\fIstring\fR" 4
.IX Item "--rowbegin=string"
Specify the text placed at the beginning of each data row [default: "\f(CW\*(C`<tr>\*(C'\fR"]
.ie n .IP """\-\-rowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowsep=\fR\fIstring\fR" 4
.IX Item "--rowsep=string"
Specify the text used to separate data rows [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowend=\fR\fIstring\fR" 4
.IX Item "--rowend=string"
Specify the text placed at the end of each data row [default: "\f(CW\*(C`</tr>\e\en\*(C'\fR"]
.ie n .IP """\-\-hcolbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolbegin=\fR\fIstring\fR" 4
.IX Item "--hcolbegin=string"
Specify the text placed at the beginning of each header column [default: "\f(CW\*(C`<th>\*(C'\fR"]
.ie n .IP """\-\-hcolsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolsep=\fR\fIstring\fR" 4
.IX Item "--hcolsep=string"
Specify the text used to separate header columns [default: same as colsep]
.ie n .IP """\-\-hcolend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolend=\fR\fIstring\fR" 4
.IX Item "--hcolend=string"
Specify the text placed at the end of each header column [default: "\f(CW\*(C`</th>\*(C'\fR"]
.ie n .IP """\-\-hrowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowbegin=\fR\fIstring\fR" 4
.IX Item "--hrowbegin=string"
Specify the text placed at the beginning of each header row [default: same as rowbegin]
.ie n .IP """\-\-hrowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowsep=\fR\fIstring\fR" 4
.IX Item "--hrowsep=string"
Specify the text used to separate header rows [default: same as rowsep]
.ie n .IP """\-\-hrowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowend=\fR\fIstring\fR" 4
.IX Item "--hrowend=string"
Specify the text placed at the end of each header row [default: same as rowend]
.ie n .IP """\-\-tablebegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablebegin=\fR\fIstring\fR" 4
.IX Item "--tablebegin=string"
Specify the text placed at the beginning of each table [default: "\f(CW\*(C`<table>\e\en\*(C'\fR"]
.ie n .IP """\-\-tablesep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablesep=\fR\fIstring\fR" 4
.IX Item "--tablesep=string"
Specify the text used to separate tables [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-tableend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tableend=\fR\fIstring\fR" 4
.IX Item "--tableend=string"
Specify the text placed at the end of each table [default: "\f(CW\*(C`</table>\e\en\*(C'\fR"]
.ie n .IP """\-\-quote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-quote=\fR\fIstring\fR" 4
.IX Item "--quote=string"
Specify the text used to begin quoted text [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-unquote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-unquote=\fR\fIstring\fR" 4
.IX Item "--unquote=string"
Specify the text used to end quoted text [default: same as quote]
.ie n .IP """\-\-keep\-columns=""\fIstring\fR" 4
.el .IP "\f(CW\-\-keep\-columns=\fR\fIstring\fR" 4
.IX Item "--keep-columns=string"
Enumerate the columns that should be included in the output [default: all columns]
.ie n .IP """\-\-merge=""\fIfunction\fR" 4
.el .IP "\f(CW\-\-merge=\fR\fIfunction\fR" 4
.IX Item "--merge=function"
Specify how to merge data from multiple files [default: "\f(CW\*(C`mean\*(C'\fR"]
.ie n .IP """\-\-showfnames=""\fIoption\fR" 4
.el .IP "\f(CW\-\-showfnames=\fR\fIoption\fR" 4
.IX Item "--showfnames=option"
Add an extra header row showing the filename the data came from [default: "\f(CW\*(C`none\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=gnuplot""" 4
.el .IP "\f(CW\-\-format=gnuplot\fR" 4
.IX Item "--format=gnuplot"
Output each table as a gnuplot data file
.RS 4
.ie n .IP """\-\-noheaders""" 4
.el .IP "\f(CW\-\-noheaders\fR" 4
.IX Item "--noheaders"
Do not output column headers
.ie n .IP """\-\-colbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colbegin=\fR\fIstring\fR" 4
.IX Item "--colbegin=string"
Specify the text placed at the beginning of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-colsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colsep=\fR\fIstring\fR" 4
.IX Item "--colsep=string"
Specify the text used to separate data columns [default: "\f(CW\*(C`\ \*(C'\fR"]
.ie n .IP """\-\-colend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colend=\fR\fIstring\fR" 4
.IX Item "--colend=string"
Specify the text placed at the end of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowbegin=\fR\fIstring\fR" 4
.IX Item "--rowbegin=string"
Specify the text placed at the beginning of each data row [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowsep=\fR\fIstring\fR" 4
.IX Item "--rowsep=string"
Specify the text used to separate data rows [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowend=\fR\fIstring\fR" 4
.IX Item "--rowend=string"
Specify the text placed at the end of each data row [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-hcolbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolbegin=\fR\fIstring\fR" 4
.IX Item "--hcolbegin=string"
Specify the text placed at the beginning of each header column [default: same as colbegin]
.ie n .IP """\-\-hcolsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolsep=\fR\fIstring\fR" 4
.IX Item "--hcolsep=string"
Specify the text used to separate header columns [default: same as colsep]
.ie n .IP """\-\-hcolend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolend=\fR\fIstring\fR" 4
.IX Item "--hcolend=string"
Specify the text placed at the end of each header column [default: same as colend]
.ie n .IP """\-\-hrowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowbegin=\fR\fIstring\fR" 4
.IX Item "--hrowbegin=string"
Specify the text placed at the beginning of each header row [default: "\f(CW\*(C`#\ \*(C'\fR"
.ie n .IP """\-\-hrowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowsep=\fR\fIstring\fR" 4
.IX Item "--hrowsep=string"
Specify the text used to separate header rows [default: same as rowsep]
.ie n .IP """\-\-hrowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowend=\fR\fIstring\fR" 4
.IX Item "--hrowend=string"
Specify the text placed at the end of each header row [default: same as rowend]
.ie n .IP """\-\-tablebegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablebegin=\fR\fIstring\fR" 4
.IX Item "--tablebegin=string"
Specify the text placed at the beginning of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-tablesep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablesep=\fR\fIstring\fR" 4
.IX Item "--tablesep=string"
Specify the text used to separate tables [default: "\f(CW\*(C`\e\en\e\en\*(C'\fR"]
.ie n .IP """\-\-tableend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tableend=\fR\fIstring\fR" 4
.IX Item "--tableend=string"
Specify the text placed at the end of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-quote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-quote=\fR\fIstring\fR" 4
.IX Item "--quote=string"
Specify the text used to begin quoted text [default: "\f(CW\*(C`"\*(C'\fR"]
.ie n .IP """\-\-unquote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-unquote=\fR\fIstring\fR" 4
.IX Item "--unquote=string"
Specify the text used to end quoted text [default: same as quote]
.ie n .IP """\-\-keep\-columns=""\fIstring\fR" 4
.el .IP "\f(CW\-\-keep\-columns=\fR\fIstring\fR" 4
.IX Item "--keep-columns=string"
Enumerate the columns that should be included in the output [default: all columns]
.ie n .IP """\-\-merge=""\fIfunction\fR" 4
.el .IP "\f(CW\-\-merge=\fR\fIfunction\fR" 4
.IX Item "--merge=function"
Specify how to merge data from multiple files [default: "\f(CW\*(C`mean\*(C'\fR"]
.ie n .IP """\-\-showfnames=""\fIoption\fR" 4
.el .IP "\f(CW\-\-showfnames=\fR\fIoption\fR" 4
.IX Item "--showfnames=option"
Add an extra header row showing the filename the data came from [default: "\f(CW\*(C`none\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=octave""" 4
.el .IP "\f(CW\-\-format=octave\fR" 4
.IX Item "--format=octave"
Output each table as an Octave text-format data file
.RS 4
.ie n .IP """\-\-noheaders""" 4
.el .IP "\f(CW\-\-noheaders\fR" 4
.IX Item "--noheaders"
Do not output column headers
.ie n .IP """\-\-colbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colbegin=\fR\fIstring\fR" 4
.IX Item "--colbegin=string"
Specify the text placed at the beginning of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-colsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colsep=\fR\fIstring\fR" 4
.IX Item "--colsep=string"
Specify the text used to separate data columns [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-colend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colend=\fR\fIstring\fR" 4
.IX Item "--colend=string"
Specify the text placed at the end of each data column [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-rowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowbegin=\fR\fIstring\fR" 4
.IX Item "--rowbegin=string"
Specify the text placed at the beginning of each data row [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowend=\fR\fIstring\fR" 4
.IX Item "--rowend=string"
Specify the text placed at the end of each data row [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-hcolbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolbegin=\fR\fIstring\fR" 4
.IX Item "--hcolbegin=string"
Specify the text placed at the beginning of each header column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-hcolsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolsep=\fR\fIstring\fR" 4
.IX Item "--hcolsep=string"
Specify the text used to separate header columns [default: "\f(CW\*(C`_\*(C'\fR"]
.ie n .IP """\-\-hcolend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolend=\fR\fIstring\fR" 4
.IX Item "--hcolend=string"
Specify the text placed at the end of each header column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-hrowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowbegin=\fR\fIstring\fR" 4
.IX Item "--hrowbegin=string"
Specify the text placed at the beginning of each header row [default: "\f(CW\*(C`#\ \*(C'\fR"]
.ie n .IP """\-\-hrowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowsep=\fR\fIstring\fR" 4
.IX Item "--hrowsep=string"
Specify the text used to separate header rows [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-hrowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowend=\fR\fIstring\fR" 4
.IX Item "--hrowend=string"
Specify the text placed at the end of each header row [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-tablebegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablebegin=\fR\fIstring\fR" 4
.IX Item "--tablebegin=string"
Specify the text placed at the beginning of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-tablesep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablesep=\fR\fIstring\fR" 4
.IX Item "--tablesep=string"
Specify the text used to separate tables [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-tableend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tableend=\fR\fIstring\fR" 4
.IX Item "--tableend=string"
Specify the text placed at the end of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-quote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-quote=\fR\fIstring\fR" 4
.IX Item "--quote=string"
Specify the text used to begin quoted text [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-unquote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-unquote=\fR\fIstring\fR" 4
.IX Item "--unquote=string"
Specify the text used to end quoted text [default: same as quote]
.ie n .IP """\-\-keep\-columns=""\fIstring\fR" 4
.el .IP "\f(CW\-\-keep\-columns=\fR\fIstring\fR" 4
.IX Item "--keep-columns=string"
Enumerate the columns that should be included in the output [default: all columns]
.ie n .IP """\-\-merge=""\fIfunction\fR" 4
.el .IP "\f(CW\-\-merge=\fR\fIfunction\fR" 4
.IX Item "--merge=function"
Specify how to merge data from multiple files [default: "\f(CW\*(C`mean\*(C'\fR"]
.ie n .IP """\-\-showfnames=""\fIoption\fR" 4
.el .IP "\f(CW\-\-showfnames=\fR\fIoption\fR" 4
.IX Item "--showfnames=option"
Add an extra header row showing the filename the data came from [default: "\f(CW\*(C`none\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=custom""" 4
.el .IP "\f(CW\-\-format=custom\fR" 4
.IX Item "--format=custom"
Output each table in a completely user-specified format
.RS 4
.ie n .IP """\-\-noheaders""" 4
.el .IP "\f(CW\-\-noheaders\fR" 4
.IX Item "--noheaders"
Do not output column headers
.ie n .IP """\-\-colbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colbegin=\fR\fIstring\fR" 4
.IX Item "--colbegin=string"
Specify the text placed at the beginning of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-colsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colsep=\fR\fIstring\fR" 4
.IX Item "--colsep=string"
Specify the text used to separate data columns [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-colend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colend=\fR\fIstring\fR" 4
.IX Item "--colend=string"
Specify the text placed at the end of each data column [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowbegin=\fR\fIstring\fR" 4
.IX Item "--rowbegin=string"
Specify the text placed at the beginning of each data row [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowsep=\fR\fIstring\fR" 4
.IX Item "--rowsep=string"
Specify the text used to separate data rows [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowend=\fR\fIstring\fR" 4
.IX Item "--rowend=string"
Specify the text placed at the end of each data row [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-hcolbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolbegin=\fR\fIstring\fR" 4
.IX Item "--hcolbegin=string"
Specify the text placed at the beginning of each header column [default: same as colbegin]
.ie n .IP """\-\-hcolsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolsep=\fR\fIstring\fR" 4
.IX Item "--hcolsep=string"
Specify the text used to separate header columns [default: same as colsep]
.ie n .IP """\-\-hcolend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hcolend=\fR\fIstring\fR" 4
.IX Item "--hcolend=string"
Specify the text placed at the end of each header column [default: same as colend]
.ie n .IP """\-\-hrowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowbegin=\fR\fIstring\fR" 4
.IX Item "--hrowbegin=string"
Specify the text placed at the beginning of each header row [default: same as rowbegin]
.ie n .IP """\-\-hrowsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowsep=\fR\fIstring\fR" 4
.IX Item "--hrowsep=string"
Specify the text used to separate header rows [default: same as rowsep]
.ie n .IP """\-\-hrowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-hrowend=\fR\fIstring\fR" 4
.IX Item "--hrowend=string"
Specify the text placed at the end of each header row [default: same as rowend]
.ie n .IP """\-\-tablebegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablebegin=\fR\fIstring\fR" 4
.IX Item "--tablebegin=string"
Specify the text placed at the beginning of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-tablesep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tablesep=\fR\fIstring\fR" 4
.IX Item "--tablesep=string"
Specify the text used to separate tables [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-tableend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-tableend=\fR\fIstring\fR" 4
.IX Item "--tableend=string"
Specify the text placed at the end of each table [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-quote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-quote=\fR\fIstring\fR" 4
.IX Item "--quote=string"
Specify the text used to begin quoted text [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-unquote=""\fIstring\fR" 4
.el .IP "\f(CW\-\-unquote=\fR\fIstring\fR" 4
.IX Item "--unquote=string"
Specify the text used to end quoted text [default: same as quote]
.ie n .IP """\-\-excel""" 4
.el .IP "\f(CW\-\-excel\fR" 4
.IX Item "--excel"
Output strings in a format readable by Microsoft Excel
.ie n .IP """\-\-keep\-columns=""\fIstring\fR" 4
.el .IP "\f(CW\-\-keep\-columns=\fR\fIstring\fR" 4
.IX Item "--keep-columns=string"
Enumerate the columns that should be included in the output [default: all columns]
.ie n .IP """\-\-merge=""\fIfunction\fR" 4
.el .IP "\f(CW\-\-merge=\fR\fIfunction\fR" 4
.IX Item "--merge=function"
Specify how to merge data from multiple files [default: "\f(CW\*(C`mean\*(C'\fR"]
.ie n .IP """\-\-showfnames=""\fIoption\fR" 4
.el .IP "\f(CW\-\-showfnames=\fR\fIoption\fR" 4
.IX Item "--showfnames=option"
Add an extra header row showing the filename the data came from [default: "\f(CW\*(C`none\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=latex""" 4
.el .IP "\f(CW\-\-format=latex\fR" 4
.IX Item "--format=latex"
Output each table as a LaTeX tabular environment
.RS 4
.ie n .IP """\-\-dcolumn""" 4
.el .IP "\f(CW\-\-dcolumn\fR" 4
.IX Item "--dcolumn"
Use the dcolumn package to align numbers on the decimal point
.ie n .IP """\-\-booktabs""" 4
.el .IP "\f(CW\-\-booktabs\fR" 4
.IX Item "--booktabs"
Use the booktabs package for a more professionally typeset look
.ie n .IP """\-\-longtable""" 4
.el .IP "\f(CW\-\-longtable\fR" 4
.IX Item "--longtable"
Use the longtable package to enable multi-page tables
.ie n .IP """\-\-keep\-columns=""\fIstring\fR" 4
.el .IP "\f(CW\-\-keep\-columns=\fR\fIstring\fR" 4
.IX Item "--keep-columns=string"
Enumerate the columns that should be included in the output [default: all columns]
.ie n .IP """\-\-merge=""\fIfunction\fR" 4
.el .IP "\f(CW\-\-merge=\fR\fIfunction\fR" 4
.IX Item "--merge=function"
Specify how to merge data from multiple files [default: "\f(CW\*(C`mean\*(C'\fR"]
.ie n .IP """\-\-showfnames=""\fIoption\fR" 4
.el .IP "\f(CW\-\-showfnames=\fR\fIoption\fR" 4
.IX Item "--showfnames=option"
Add an extra header row showing the filename the data came from [default: "\f(CW\*(C`none\*(C'\fR"]
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .IP """\-\-extract=params""" 4
.el .IP "\f(CW\-\-extract=params\fR" 4
.IX Item "--extract=params"
Extract the program's run-time parameters and environment variables
.RS 4
.ie n .IP """\-\-format=text"" [default]" 4
.el .IP "\f(CW\-\-format=text\fR [default]" 4
.IX Item "--format=text [default]"
Output the parameters in plain-text format
.RS 4
.ie n .IP """\-\-include=""\fIfilename\fR" 4
.el .IP "\f(CW\-\-include=\fR\fIfilename\fR" 4
.IX Item "--include=filename"
Read from a file the list of keys to output
.ie n .IP """\-\-exclude=""\fIregexp\fR" 4
.el .IP "\f(CW\-\-exclude=\fR\fIregexp\fR" 4
.IX Item "--exclude=regexp"
Ignore any keys whose name matches a regular expression
.ie n .IP """\-\-sort""" 4
.el .IP "\f(CW\-\-sort\fR" 4
.IX Item "--sort"
Sort the list of parameters alphabetically by key
.ie n .IP """\-\-noenv""" 4
.el .IP "\f(CW\-\-noenv\fR" 4
.IX Item "--noenv"
Exclude environment variables
.ie n .IP """\-\-noparams""" 4
.el .IP "\f(CW\-\-noparams\fR" 4
.IX Item "--noparams"
Exclude run-time parameters
.ie n .IP """\-\-envformat=""\fItemplate\fR" 4
.el .IP "\f(CW\-\-envformat=\fR\fItemplate\fR" 4
.IX Item "--envformat=template"
Format environment variable names using the given template [default: "\f(CW\*(C`%s\ (environment\ variable)\*(C'\fR"]
.ie n .IP """\-\-columns=""\fInumber\fR" 4
.el .IP "\f(CW\-\-columns=\fR\fInumber\fR" 4
.IX Item "--columns=number"
Output the parameters as a 1\-, 2\-, or 3\-column table [default: 1]
.ie n .IP """\-\-colsep=""\fIstring\fR" 4
.el .IP "\f(CW\-\-colsep=\fR\fIstring\fR" 4
.IX Item "--colsep=string"
Specify the text used to separate data columns [default: "\f(CW\*(C`:\ \*(C'\fR"]
.ie n .IP """\-\-rowbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowbegin=\fR\fIstring\fR" 4
.IX Item "--rowbegin=string"
Specify the text that's output at the start of each data row [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-rowend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-rowend=\fR\fIstring\fR" 4
.IX Item "--rowend=string"
Specify the text that's output at the end of each data row [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=dumpkeys""" 4
.el .IP "\f(CW\-\-format=dumpkeys\fR" 4
.IX Item "--format=dumpkeys"
Output a list of the keys only (i.e., no values)
.RS 4
.ie n .IP """\-\-include=""\fIfilename\fR" 4
.el .IP "\f(CW\-\-include=\fR\fIfilename\fR" 4
.IX Item "--include=filename"
Read the list of parameters to output from a given file
.ie n .IP """\-\-exclude=""\fIregexp\fR" 4
.el .IP "\f(CW\-\-exclude=\fR\fIregexp\fR" 4
.IX Item "--exclude=regexp"
Ignore any keys whose name matches a regular expression
.ie n .IP """\-\-envformat=""\fItemplate\fR" 4
.el .IP "\f(CW\-\-envformat=\fR\fItemplate\fR" 4
.IX Item "--envformat=template"
Format environment variable names using the given template [default: "\f(CW\*(C`%s\ (environment\ variable)\*(C'\fR"]
.ie n .IP """\-\-sort""" 4
.el .IP "\f(CW\-\-sort\fR" 4
.IX Item "--sort"
Sort the list of parameters alphabetically by key
.ie n .IP """\-\-noenv""" 4
.el .IP "\f(CW\-\-noenv\fR" 4
.IX Item "--noenv"
Exclude environment variables
.ie n .IP """\-\-noparams""" 4
.el .IP "\f(CW\-\-noparams\fR" 4
.IX Item "--noparams"
Exclude run-time parameters
.RE
.RS 4
.RE
.ie n .IP """\-\-format=latex""" 4
.el .IP "\f(CW\-\-format=latex\fR" 4
.IX Item "--format=latex"
Output the parameters as a LaTeX tabular environment
.RS 4
.ie n .IP """\-\-include=""\fIfilename\fR" 4
.el .IP "\f(CW\-\-include=\fR\fIfilename\fR" 4
.IX Item "--include=filename"
Read from a file the list of keys to output
.ie n .IP """\-\-exclude=""\fIregexp\fR" 4
.el .IP "\f(CW\-\-exclude=\fR\fIregexp\fR" 4
.IX Item "--exclude=regexp"
Ignore any keys whose name matches a regular expression
.ie n .IP """\-\-envformat=""\fItemplate\fR" 4
.el .IP "\f(CW\-\-envformat=\fR\fItemplate\fR" 4
.IX Item "--envformat=template"
Format environment variable names using the given template [default: "\f(CW\*(C`%s\ (environment\ variable)\*(C'\fR"]
.ie n .IP """\-\-sort""" 4
.el .IP "\f(CW\-\-sort\fR" 4
.IX Item "--sort"
Sort the list of parameters alphabetically by key
.ie n .IP """\-\-booktabs""" 4
.el .IP "\f(CW\-\-booktabs\fR" 4
.IX Item "--booktabs"
Use the booktabs package for a more professionally typeset look
.ie n .IP """\-\-tabularx""" 4
.el .IP "\f(CW\-\-tabularx\fR" 4
.IX Item "--tabularx"
Use the tabularx package to enable line wraps within the value column
.ie n .IP """\-\-longtable""" 4
.el .IP "\f(CW\-\-longtable\fR" 4
.IX Item "--longtable"
Use the longtable package to enable multi-page tables
.ie n .IP """\-\-noenv""" 4
.el .IP "\f(CW\-\-noenv\fR" 4
.IX Item "--noenv"
Exclude environment variables
.ie n .IP """\-\-noparams""" 4
.el .IP "\f(CW\-\-noparams\fR" 4
.IX Item "--noparams"
Exclude run-time parameters
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .IP """\-\-extract=env""" 4
.el .IP "\f(CW\-\-extract=env\fR" 4
.IX Item "--extract=env"
Extract the environment in which the program was run
.RS 4
.ie n .IP """\-\-format=sh"" [default]" 4
.el .IP "\f(CW\-\-format=sh\fR [default]" 4
.IX Item "--format=sh [default]"
Use Bourne shell syntax for setting environment variables
.RS 4
.ie n .IP """\-\-newlines""" 4
.el .IP "\f(CW\-\-newlines\fR" 4
.IX Item "--newlines"
Separate commands with newlines instead of semicolons
.ie n .IP """\-\-unset""" 4
.el .IP "\f(CW\-\-unset\fR" 4
.IX Item "--unset"
Unset all other environment variables
.ie n .IP """\-\-chdir""" 4
.el .IP "\f(CW\-\-chdir\fR" 4
.IX Item "--chdir"
Switch to the program's original working directory
.RE
.RS 4
.RE
.ie n .IP """\-\-format=bash""" 4
.el .IP "\f(CW\-\-format=bash\fR" 4
.IX Item "--format=bash"
Use Bourne Again shell syntax for setting environment variables
.RS 4
.ie n .IP """\-\-newlines""" 4
.el .IP "\f(CW\-\-newlines\fR" 4
.IX Item "--newlines"
Separate commands with newlines instead of semicolons
.ie n .IP """\-\-unset""" 4
.el .IP "\f(CW\-\-unset\fR" 4
.IX Item "--unset"
Unset all other environment variables
.ie n .IP """\-\-chdir""" 4
.el .IP "\f(CW\-\-chdir\fR" 4
.IX Item "--chdir"
Switch to the program's original working directory
.RE
.RS 4
.RE
.ie n .IP """\-\-format=ksh""" 4
.el .IP "\f(CW\-\-format=ksh\fR" 4
.IX Item "--format=ksh"
Use Korn shell syntax for setting environment variables
.RS 4
.ie n .IP """\-\-newlines""" 4
.el .IP "\f(CW\-\-newlines\fR" 4
.IX Item "--newlines"
Separate commands with newlines instead of semicolons
.ie n .IP """\-\-unset""" 4
.el .IP "\f(CW\-\-unset\fR" 4
.IX Item "--unset"
Unset all other environment variables
.ie n .IP """\-\-chdir""" 4
.el .IP "\f(CW\-\-chdir\fR" 4
.IX Item "--chdir"
Switch to the program's original working directory
.RE
.RS 4
.RE
.ie n .IP """\-\-format=csh""" 4
.el .IP "\f(CW\-\-format=csh\fR" 4
.IX Item "--format=csh"
Use C shell syntax for setting environment variables
.RS 4
.ie n .IP """\-\-newlines""" 4
.el .IP "\f(CW\-\-newlines\fR" 4
.IX Item "--newlines"
Separate commands with newlines instead of semicolons
.ie n .IP """\-\-unset""" 4
.el .IP "\f(CW\-\-unset\fR" 4
.IX Item "--unset"
Unset all other environment variables
.ie n .IP """\-\-chdir""" 4
.el .IP "\f(CW\-\-chdir\fR" 4
.IX Item "--chdir"
Switch to the program's original working directory
.RE
.RS 4
.RE
.ie n .IP """\-\-format=zsh""" 4
.el .IP "\f(CW\-\-format=zsh\fR" 4
.IX Item "--format=zsh"
Use Z shell syntax for setting environment variables
.RS 4
.ie n .IP """\-\-newlines""" 4
.el .IP "\f(CW\-\-newlines\fR" 4
.IX Item "--newlines"
Separate commands with newlines instead of semicolons
.ie n .IP """\-\-unset""" 4
.el .IP "\f(CW\-\-unset\fR" 4
.IX Item "--unset"
Unset all other environment variables
.ie n .IP """\-\-chdir""" 4
.el .IP "\f(CW\-\-chdir\fR" 4
.IX Item "--chdir"
Switch to the program's original working directory
.RE
.RS 4
.RE
.ie n .IP """\-\-format=tcsh""" 4
.el .IP "\f(CW\-\-format=tcsh\fR" 4
.IX Item "--format=tcsh"
Use tcsh syntax for setting environment variables
.RS 4
.ie n .IP """\-\-newlines""" 4
.el .IP "\f(CW\-\-newlines\fR" 4
.IX Item "--newlines"
Separate commands with newlines instead of semicolons
.ie n .IP """\-\-unset""" 4
.el .IP "\f(CW\-\-unset\fR" 4
.IX Item "--unset"
Unset all other environment variables
.ie n .IP """\-\-chdir""" 4
.el .IP "\f(CW\-\-chdir\fR" 4
.IX Item "--chdir"
Switch to the program's original working directory
.RE
.RS 4
.RE
.ie n .IP """\-\-format=ash""" 4
.el .IP "\f(CW\-\-format=ash\fR" 4
.IX Item "--format=ash"
Use ash syntax for setting environment variables
.RS 4
.ie n .IP """\-\-newlines""" 4
.el .IP "\f(CW\-\-newlines\fR" 4
.IX Item "--newlines"
Separate commands with newlines instead of semicolons
.ie n .IP """\-\-unset""" 4
.el .IP "\f(CW\-\-unset\fR" 4
.IX Item "--unset"
Unset all other environment variables
.ie n .IP """\-\-chdir""" 4
.el .IP "\f(CW\-\-chdir\fR" 4
.IX Item "--chdir"
Switch to the program's original working directory
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .IP """\-\-extract=source""" 4
.el .IP "\f(CW\-\-extract=source\fR" 4
.IX Item "--extract=source"
Extract \*(co source code
.RS 4
.ie n .IP """\-\-format=text"" [default]" 4
.el .IP "\f(CW\-\-format=text\fR [default]" 4
.IX Item "--format=text [default]"
Output the source code in plain-text format
.RS 4
.ie n .IP """\-\-linebegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-linebegin=\fR\fIstring\fR" 4
.IX Item "--linebegin=string"
Specify the text placed at the beginning of each line [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-lineend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-lineend=\fR\fIstring\fR" 4
.IX Item "--lineend=string"
Specify the text placed at the end of each line [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.ie n .IP """\-\-kwbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-kwbegin=\fR\fIstring\fR" 4
.IX Item "--kwbegin=string"
Specify the text placed before each keyword [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-kwend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-kwend=\fR\fIstring\fR" 4
.IX Item "--kwend=string"
Specify the text placed after each keyword [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-strbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-strbegin=\fR\fIstring\fR" 4
.IX Item "--strbegin=string"
Specify the text placed before each string [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-strend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-strend=\fR\fIstring\fR" 4
.IX Item "--strend=string"
Specify the text placed after each string [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-combegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-combegin=\fR\fIstring\fR" 4
.IX Item "--combegin=string"
Specify the text placed before each comment [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-comend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-comend=\fR\fIstring\fR" 4
.IX Item "--comend=string"
Specify the text placed after each comment [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-indent=""\fInumber\fR" 4
.el .IP "\f(CW\-\-indent=\fR\fInumber\fR" 4
.IX Item "--indent=number"
Indent each line by a given number of spaces
.ie n .IP """\-\-wrap=""\fInumber\fR" 4
.el .IP "\f(CW\-\-wrap=\fR\fInumber\fR" 4
.IX Item "--wrap=number"
Wrap the source code into a paragraph with a given character width
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.ie n .IP """\-\-extract=warnings""" 4
.el .IP "\f(CW\-\-extract=warnings\fR" 4
.IX Item "--extract=warnings"
Extract a list of warnings the program issued during initialization
.RS 4
.ie n .IP """\-\-format=text"" [default]" 4
.el .IP "\f(CW\-\-format=text\fR [default]" 4
.IX Item "--format=text [default]"
Output warnings in plain-text format
.RS 4
.ie n .IP """\-\-listbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-listbegin=\fR\fIstring\fR" 4
.IX Item "--listbegin=string"
Specify text to appear at the beginning of the list [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-listend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-listend=\fR\fIstring\fR" 4
.IX Item "--listend=string"
Specify text to appear at the end of the list [default: "\f(CW\*(C`\*(C'\fR"]
.ie n .IP """\-\-itembegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-itembegin=\fR\fIstring\fR" 4
.IX Item "--itembegin=string"
Specify text to appear before each warning [default: "\f(CW\*(C`*\ \*(C'\fR"]
.ie n .IP """\-\-itemend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-itemend=\fR\fIstring\fR" 4
.IX Item "--itemend=string"
Specify text to appear after each warning [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=html""" 4
.el .IP "\f(CW\-\-format=html\fR" 4
.IX Item "--format=html"
Output warnings as an \s-1HTML\s0 list
.RS 4
.ie n .IP """\-\-listbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-listbegin=\fR\fIstring\fR" 4
.IX Item "--listbegin=string"
Specify text to appear at the beginning of the list [default: "\f(CW\*(C`<ul>\e\en\*(C'\fR"]
.ie n .IP """\-\-listend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-listend=\fR\fIstring\fR" 4
.IX Item "--listend=string"
Specify text to appear at the end of the list [default: "\f(CW\*(C`</ul>\e\en\*(C'\fR"]
.ie n .IP """\-\-itembegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-itembegin=\fR\fIstring\fR" 4
.IX Item "--itembegin=string"
Specify text to appear before each warning [default: "\f(CW\*(C`\ \ <li>\*(C'\fR"]
.ie n .IP """\-\-itemend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-itemend=\fR\fIstring\fR" 4
.IX Item "--itemend=string"
Specify text to appear after each warning [default: "\f(CW\*(C`</li>\e\en\*(C'\fR"]
.RE
.RS 4
.RE
.ie n .IP """\-\-format=latex""" 4
.el .IP "\f(CW\-\-format=latex\fR" 4
.IX Item "--format=latex"
Output warnings as a LaTeX list
.RS 4
.ie n .IP """\-\-listbegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-listbegin=\fR\fIstring\fR" 4
.IX Item "--listbegin=string"
Specify text to appear at the beginning of the list [default: "\f(CW\*(C`\ebegin{itemize}\e\en\*(C'\fR"]
.ie n .IP """\-\-listend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-listend=\fR\fIstring\fR" 4
.IX Item "--listend=string"
Specify text to appear at the end of the list [default: "\f(CW\*(C`\eend{itemize}\e\en\*(C'\fR"]
.ie n .IP """\-\-itembegin=""\fIstring\fR" 4
.el .IP "\f(CW\-\-itembegin=\fR\fIstring\fR" 4
.IX Item "--itembegin=string"
Specify text to appear before each warning [default: "\f(CW\*(C`\ \ \eitem\ \*(C'\fR"]
.ie n .IP """\-\-itemend=""\fIstring\fR" 4
.el .IP "\f(CW\-\-itemend=\fR\fIstring\fR" 4
.IX Item "--itemend=string"
Specify text to appear after each warning [default: "\f(CW\*(C`\e\en\*(C'\fR"]
.RE
.RS 4
.RE
.RE
.RS 4
.RE
.PP

.PP
The following represent additional clarification for some of the above:
.IP "\(bu" 4
If \f(CW\*(C`\-\-indent\*(C'\fR is specified without an argument, the argument defaults
to \f(CW2\fR.
.IP "\(bu" 4
If \f(CW\*(C`\-\-wrap\*(C'\fR is specified without an argument, the argument
defaults to \f(CW72\fR.
.IP "\(bu" 4
The following are examples of the different arguments to the
\&\f(CW\*(C`\-\-columns\*(C'\fR option:
.RS 4
.ie n .IP """\-\-columns=1"" (default)" 2
.el .IP "\f(CW\-\-columns=1\fR (default)" 2
.IX Item "--columns=1 (default)"
.Vb 5
\&  \*(co version: 1.0
\&  \*(co backend: c_mpi
\&  Average timer overhead [gettimeofday()]: <1 microsecond
\&  Log creation time: Thu Mar 27 19:22:48 2003
\&  Log completion time: Thu Mar 27 19:22:48 2003
.Ve
.ie n .IP """\-\-columns=2""" 2
.el .IP "\f(CW\-\-columns=2\fR" 2
.IX Item "--columns=2"
.Vb 5
\&  \*(co version:                      1.0
\&  \*(co backend:                      c_mpi
\&  Average timer overhead [gettimeofday()]: <1 microsecond
\&  Log creation time:                       Thu Mar 27 19:22:48 2003
\&  Log completion time:                     Thu Mar 27 19:22:48 2003
.Ve
.ie n .IP """\-\-columns=3""" 2
.el .IP "\f(CW\-\-columns=3\fR" 2
.IX Item "--columns=3"
.Vb 5
\&  \*(co version                     : 1.0
\&  \*(co backend                     : c_mpi
\&  Average timer overhead [gettimeofday()]: <1 microsecond
\&  Log creation time                      : Thu Mar 27 19:22:48 2003
\&  Log completion time                    : Thu Mar 27 19:22:48 2003
.Ve
.RE
.RS 4
.RE
.IP "\(bu" 4
\&\f(CW\*(C`\-\-dumpkeys\*(C'\fR produces suitable input for the \f(CW\*(C`\-\-include\*(C'\fR option.
.IP "\(bu" 4
\&\f(CW\*(C`\-\-exclude\*(C'\fR can be specified repeatedly on the command line.
.IP "\(bu" 4
\&\f(CW\*(C`\-\-keep\-columns\*(C'\fR accepts a list of comma-separated column ranges.
For example, \f(CW\*(C`\-\-keep\-columns=1,3\-6,8\*(C'\fR tells \fBncptl-logextract\fR to
ignore all but the first, third through sixth, and eighth columns of
data.
.IP "\(bu" 4
\&\f(CW\*(C`\-\-merge\*(C'\fR takes one of \f(CW\*(C`mean\*(C'\fR (arithmetic mean), \f(CW\*(C`hmean\*(C'\fR (harmonic
mean), \f(CW\*(C`min\*(C'\fR (minimum), \f(CW\*(C`max\*(C'\fR (maximum), \f(CW\*(C`median\*(C'\fR (median), \f(CW\*(C`sum\*(C'\fR
(sum), \f(CW\*(C`all\*(C'\fR (all values from each column), or \f(CW\*(C`concat\*(C'\fR (horizontal
concatenation of all data), and applies the function to corresponding
data values across all of the input files.  \f(CW\*(C`\-\-merge\*(C'\fR can also accept
a comma-separated list of the above functions, one per data column.
This enables a different merge operation to be used for each column.
For example, \f(CW\*(C`\-\-merge=min,min,mean\*(C'\fR will take the minimum value
across all files of each element in the first and second columns and
the arithmetic mean across all files of each element in the third
column.  If the number of comma-separated values differs from the
number of columns and \f(CW\*(C`\-\-force\-merge\*(C'\fR is specified,
\&\fBncptl-logextract\fR will cycle over the given values until all columns
are accounted for.  The \f(CW\*(C`concat\*(C'\fR merge type applies to all columns
and therefore cannot be combined with any other merge type.  The
difference between \f(CW\*(C`\-\-merge=all\*(C'\fR and \f(CW\*(C`\-\-merge=concat\*(C'\fR is that the
former merges three files each with columns \fIA\fR and \fIB\fR as {\fIA\fR,
\&\fIA\fR, \fIA\fR, \fIB\fR, \fIB\fR, \fIB\fR} while the latter merges the same files
as {\fIA\fR, \fIB\fR, \fIA\fR, \fIB\fR, \fIA\fR, \fIB\fR}.
.Sp
Note that \f(CW\*(C`\-\-merge\*(C'\fR is applied \fIafter\fR \f(CW\*(C`\-\-keep\-columns\*(C'\fR.  Hence, if
\&\f(CW\*(C`\-\-keep\-columns\*(C'\fR specifies that only three columns be kept,
\&\f(CW\*(C`\-\-merge\*(C'\fR should list exactly three operations (or a single operation
that applies to all three columns).
.IP "\(bu" 4
\&\f(CW\*(C`\-\-showfnames\*(C'\fR prepends to each data table in the input file an extra
header line indicating the log file the data was extracted from.  This
option makes sense only when data is being extracted and primarily
when \f(CW\*(C`\-\-merge=all\*(C'\fR is specified.  \f(CW\*(C`\-\-showfnames\*(C'\fR takes one of
\&\f(CW\*(C`none\*(C'\fR, \f(CW\*(C`all\*(C'\fR, or \f(CW\*(C`first\*(C'\fR.  The default is \f(CW\*(C`none\*(C'\fR, which doesn't
add an extra header row.  \f(CW\*(C`all\*(C'\fR repeats the filename in each column
of the extra header row.  \f(CW\*(C`first\*(C'\fR outputs the filename in only the
first column, leaving the remaining columns with an empty string.  The
following examples show how a sample data table is formatted with
\&\f(CW\*(C`\-\-showfnames\*(C'\fR set in turn to each of \f(CW\*(C`none\*(C'\fR, \f(CW\*(C`all\*(C'\fR, and \f(CW\*(C`first\*(C'\fR:
.RS 4
.IP "\(bu" 4
Set to \f(CW\*(C`none\*(C'\fR (the default):
.Sp
.Vb 4
\&    "Size","Value"
\&    1,2
\&    2,4
\&    3,6
.Ve
.IP "\(bu" 4
Set to \f(CW\*(C`all\*(C'\fR (filename repeated in each column of the first row):
.Sp
.Vb 5
\&    "mydata.log","mydata.log"
\&    "Size","Value"
\&    1,2
\&    2,4
\&    3,6
.Ve
.IP "\(bu" 4
Set to \f(CW\*(C`first\*(C'\fR (filename shown only in the first column of the first row):
.Sp
.Vb 5
\&    "mydata.log",""
\&    "Size","Value"
\&    1,2
\&    2,4
\&    3,6
.Ve
.RE
.RS 4
.RE
.IP "\(bu" 4
If \f(CW\*(C`\-\-format=params\*(C'\fR is used with both \f(CW\*(C`\-\-longtable\*(C'\fR and
\&\f(CW\*(C`\-\-tabularx\*(C'\fR, the generated table will be formatted for use with the
\&\f(CW\*(C`ltxtable\*(C'\fR LaTeX package.  See the \f(CW\*(C`ltxtable\*(C'\fR documentation for more
information.
.SH "NOTES"
.IX Header "NOTES"
If no filenames are given, \fBncptl-logextract\fR will read from the
standard input device.  If multiple log files are specified,
\*(co will merge the data values and take all other information
from the first file specified.  Note, however, that all of the log
files must have been produced by the same \*(co program and that
that program must have been run in the same environment.  In other
words, only the data values may change across log files; everything
else must be invariant.  See the description of \f(CW\*(C`\-\-merge\*(C'\fR in
\&\*(L"\s-1ADDITIONAL OPTIONS\*(R"\s0 for more information about merging data
values from multiple log files.
.PP
\&\fBncptl-logextract\fR treats certain files specially:
.IP "\(bu" 4
If \fBncptl-logextract\fR is given a filename ending in \fI.gz\fR, \fI.bz2\fR,
or \fI.Z\fR it automatically decompresses the file to a temporary
location using \fBgunzip\fR, \fBbunzip2\fR, or \fBuncompress\fR, as
appropriate, then recursively processes the decompressed file.
.IP "\(bu" 4
If \fBncptl-logextract\fR is given a filename ending in \fI.tar\fR or
\&\fI.zip\fR it automatically extracts the file's contents to a temporary
directory using \fBtar\fR or \fBunzip\fR, as appropriate, then recursively
processes the temporary directory.
.IP "\(bu" 4
If \fBncptl-logextract\fR is given the name of a directory it processes
all of the plain files found (recursively) beneath that directory.
.IP "\(bu" 4
If an input file is a merged \*(co log file (i.e.,\ produced by
\&\fBncptl-logmerge\fR), \fBncptl-logextract\fR automatically invokes
\&\fBncptl-logunmerge\fR to split the file into its constituent, ordinary
log files then recursively processes those.
.PP
\&\fBncptl-logmerge\fR treats filenames ending in \fI.tgz\fR as if they ended
in \fI.tar.gz\fR and filenames ending in \fI.taz\fR as if they ended in
\&\fI.tar.Z\fR.
.PP
If the argument provided to any \fBncptl-logextract\fR option begins with
an at\ sign ("\f(CW\*(C`@\*(C'\fR\*(L"), the value is treated as a filename and is
replaced by the file's contents.  To specify an non-filename argument
that begins with an at\ sign, merely prepend an additional \*(R"\f(CW\*(C`@\*(C'\fR":
.ie n .IP """\-\-this=that""" 4
.el .IP "\f(CW\-\-this=that\fR" 4
.IX Item "--this=that"
The option \f(CW\*(C`this\*(C'\fR is given the value "\f(CW\*(C`that\*(C'\fR".
.ie n .IP """\-\-this=@that""" 4
.el .IP "\f(CW\-\-this=@that\fR" 4
.IX Item "--this=@that"
The option \f(CW\*(C`this\*(C'\fR is set to the contents of the file called \fIthat\fR.
.ie n .IP """\-\-this=@@that""" 4
.el .IP "\f(CW\-\-this=@@that\fR" 4
.IX Item "--this=@@that"
The option \f(CW\*(C`this\*(C'\fR is given the value "\f(CW@that\fR".
.SH "EXAMPLES"
.IX Header "EXAMPLES"
For the following examples, we assume that \fIresults.log\fR is the name
of a log file produced by a \*(co program.
.PP
Extract the data in \s-1CSV\s0 format and write it to \fIresults.csv\fR:
.PP
.Vb 1
\&    ncptl\-logextract \-\-extract=data results.log \-\-output=results.csv
.Ve
.PP
Note that \f(CW\*(C`\-\-extract=data\*(C'\fR is the default and therefore optional:
.PP
.Vb 1
\&    ncptl\-logextract results.log \-\-output=results.csv
.Ve
.PP
\&\fBncptl-logextract\fR can combine data from multiple log files (using an
arithmetic mean by default):
.PP
.Vb 1
\&    ncptl\-logextract results\-*.log \-\-output=results.csv
.Ve
.PP
Put the data from all of the log files side-by-side and produce a \s-1CSV\s0
file that Microsoft Excel can read directly:
.PP
.Vb 2
\&    ncptl\-logextract results\-*.log \-\-output=results.csv \-\-merge=all \e
\&       \-\-showfnames=first \-\-excel
.Ve
.PP
Output the data from \fIresult.log\fR in tab-separated-value format:
.PP
.Vb 1
\&    ncptl\-logextract \-\-format=tsv results.log
.Ve
.PP
Output the data in space-separated-value format:
.PP
.Vb 1
\&    ncptl\-logextract \-\-colsep=" " results.log
.Ve
.PP
Use \fBgnuplot\fR to draw a PostScript graph of the data:
.PP
.Vb 2
\&    ncptl\-logextract results.log \-\-format=gnuplot \e
\&       \-\-before=@params.gp | gnuplot > results.eps
.Ve
.PP
In the above, the \fIparams.gp\fR file might contain \fBgnuplot\fR commands
such as the following:
.PP
.Vb 6
\&    set terminal postscript eps enhanced color "Times\-Roman" 30
\&    set output
\&    set logscale xy
\&    set data style linespoints
\&    set pointsize 3
\&    plot "\-" title "Latency"
.Ve
.PP
(There should be an extra blank line at the end of the file because
\&\fBncptl-logextract\fR strips off a trailing newline character whenever
it reads a file using "\f(CW\*(C`@\*(C'\fR".)
.PP
Produce a complete \s-1HTML\s0 file of the data (noting that \f(CW\*(C`\-\-format=html\*(C'\fR
produces only tables, not complete documents):
.PP
.Vb 3
\&    ncptl\-logextract \-\-format=html
\&       \-\-before=\*(Aq<html>\en<head>\en<title>Data</title>\en</head>\en<body>\en\*(Aq \e
\&       \-\-after=\*(Aq</body>\en</html>\en\*(Aq results.log
.Ve
.PP
Output the data as a LaTeX \f(CW\*(C`tabular\*(C'\fR, relying on both the (standard)
\&\f(CW\*(C`dcolumn\*(C'\fR and (non-standard) \f(CW\*(C`booktabs\*(C'\fR packages for more attractive
formatting:
.PP
.Vb 2
\&    ncptl\-logextract \-\-format=latex \-\-dcolumn \-\-booktabs \e
\&      \-\-output=results.tex results.log
.Ve
.PP
Output the run-time parameters in the form "\fIkey\fR \f(CW\*(C`\-\->\*(C'\fR
\&\fIvalue\fR" with all of the arrows aligned:
.PP
.Vb 1
\&    ncptl\-logextract results.log \-\-extract=params \-\-columns=3 \-\-colsep=" \-\-> "
.Ve
.PP
Output the run-time parameters as an \s-1HTML\s0 description list:
.PP
.Vb 3
\&    ncptl\-logextract results.log \-\-extract=params \-\-before=\*(Aq<dl>\*(Aq \e
\&      \-\-rowbegin=\*(Aq<dt>\*(Aq \-\-colsep=\*(Aq</dt><dd>\*(Aq \-\-rowend=\*(Aq</dd>\en\*(Aq \e
\&      \-\-after=\*(Aq</dl>\en\*(Aq
.Ve
.PP
Restore the exact execution environment that was used to produce
\&\fIresults.log\fR, including the current working directory (assuming that
\&\fBbash\fR is the current command shell):
.PP
.Vb 2
\&    eval \`ncptl\-logextract \-\-extract=env \-\-format=bash \e
\&      \-\-unset \-\-chdir results.log\`
.Ve
.PP
Set all of the environment variables that were used to produce
\&\fIresults.log\fR, overwriting--but not removing--whatever environment
variables are currently set (assuming that \fBtcsh\fR is the current
command shell):
.PP
.Vb 1
\&    eval \`ncptl\-logextract \-\-extract=env \-\-format=tcsh results.log\`
.Ve
.PP
Extract the source code that produced \fIresults.log\fR:
.PP
.Vb 1
\&    ncptl\-logextract \-\-extract=source results.log
.Ve
.PP
Do the same, but indent the code by four spaces then re-wrap it into a
60\-column paragraph:
.PP
.Vb 1
\&    ncptl\-logextract \-\-extract=source \-\-indent=4 \-\-wrap=60 results.log
.Ve
.PP
Here are a variety of ways to express the same thing:
.PP
.Vb 1
\&    ncptl\-logextract \-e source \-\-indent=4 \-\-wrap=60 results.log
\&
\&    ncptl\-logextract \-e source \-\-indent=4 results.log \-\-wrap=60
\&
\&    cat results.log | ncptl\-logextract \-\-wrap=60 \-\-indent=4 \-e source
.Ve
.PP
Output the source code wrapped to 72 columns, with no indentation, and
formatted within an \s-1HTML\s0 preformatted-text block:
.PP
.Vb 2
\&    ncptl\-logextract \-\-extract=source \-\-wrap \-\-before="<PRE>\en" \e
\&      after="</PRE>\en" results.log
.Ve
.PP
List all of the warning messages which occur in \fIresults.log\fR:
.PP
.Vb 1
\&    ncptl\-logextract \-\-extract=warnings results.log
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIncptl\-logmerge\fR\|(1), \fIncptl\-logunmerge\fR\|(1), the \*(co User's Guide
.SH "AUTHOR"
.IX Header "AUTHOR"
Scott Pakin, \fIpakin@lanl.gov\fR
